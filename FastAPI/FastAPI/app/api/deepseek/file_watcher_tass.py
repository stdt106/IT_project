import time
import json
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from FastAPI.app.services.logger import setup_logger
from FastAPI.app.core.producer_singleton import producer_instance as producer

logger = setup_logger('file_watcher_tass')

NEW_PATH = Path(__file__).parent / "neww_tass.json"
SENT_PATH = Path(__file__).parent / "sent_news_tass.json"

class NewwTassHandler(FileSystemEventHandler):
    def __init__(self, producer):
        self.producer = producer

    def on_modified(self, event):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if Path(event.src_path).resolve() != NEW_PATH.resolve():
            return

        logger.info("üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ neww_tass.json")

        try:
            with open(NEW_PATH, 'r', encoding='utf-8') as f:
                new_data = json.load(f)

            # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
            if SENT_PATH.exists():
                with open(SENT_PATH, 'r', encoding='utf-8') as f:
                    sent_data = json.load(f)
                if sent_data.get("full_text") == new_data.get("full_text"):
                    logger.warning("üü° –ù–æ–≤–æ—Å—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            try:
                self.producer.send("news_queue", new_data)
                logger.info("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ RabbitMQ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º sent_news_tass.json
            with open(SENT_PATH, 'w', encoding='utf-8') as f:
                json.dump(new_data, f, ensure_ascii=False, indent=4)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ neww_tass.json: {e}")

def start_watching(producer):
    observer = Observer()
    event_handler = NewwTassHandler(producer)
    observer.schedule(event_handler, path=NEW_PATH.parent, recursive=False)
    observer.start()
    logger.info("üëÄ –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ neww_tass.json –∑–∞–ø—É—â–µ–Ω–æ")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
